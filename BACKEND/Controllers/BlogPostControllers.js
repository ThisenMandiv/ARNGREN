// Controllers/BlogPostControllers.js
import BlogPost from "../Model/BlogPostModel.js";
import mongoose from 'mongoose';
// import fs from 'fs'; // Uncomment if handling image deletion
// import path from 'path'; // Uncomment if handling image deletion

// Helper for error responses
const handleError = (res, err, message = "Server error", statusCode = 500) => {
    console.error(message, err);
    if (err && err.name === 'ValidationError') {
        return res.status(400).json({ message: "Validation Error", errors: err.errors });
    }
     if (err && err.code === 11000) { // Handle duplicate key errors (slug/title)
        return res.status(400).json({ message: "Duplicate key error", error: err.keyValue });
    }
    return res.status(statusCode).json({ message });
};

// Get all blog posts, sorted by creation date
export const getAllBlogPosts = async (req, res) => {
    try {
        // Select fields to return, sort by newest first
        const posts = await BlogPost.find().select('title slug author status createdAt updatedAt excerpt imageUrl').sort({ createdAt: -1 });
        res.status(200).json({ posts });
    } catch (err) {
        handleError(res, err, "Error fetching blog posts");
    }
};

// Get a single blog post by ID or Slug
export const getBlogPostByIdOrSlug = async (req, res) => {
    const { identifier } = req.params; // Can be ID or slug
    let query;

    if (mongoose.Types.ObjectId.isValid(identifier)) {
        query = { _id: identifier };
    } else {
        query = { slug: identifier }; // Assume it's a slug if not a valid ID
    }

    try {
        const post = await BlogPost.findOne(query); // Find by ID or slug
        if (!post) {
            return res.status(404).json({ message: "Blog post not found" });
        }
        res.status(200).json({ post });
    } catch (err) {
        handleError(res, err, `Error fetching blog post ${identifier}`);
    }
};

// Create a new blog post
export const createBlogPost = async (req, res) => {
    // Add imageUrl if handling file uploads
    const { title, content, excerpt, author, status, imageUrl } = req.body;
    if (!title || !content) {
        return res.status(400).json({ message: "Missing required fields (title, content)" });
    }
    try {
        // Slug is generated by pre-save hook in model
        const newPost = new BlogPost({ title, content, excerpt, author, status, imageUrl });
        await newPost.save();
        res.status(201).json({ message: "Blog post created successfully", post: newPost });
    } catch (err) {
        handleError(res, err, "Error creating blog post");
    }
};

// Update an existing blog post
export const updateBlogPost = async (req, res) => {
    const { id } = req.params;
    // Add imageUrl if handling file uploads
    const { title, content, excerpt, author, status, imageUrl } = req.body;

    if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({ message: "Invalid blog post ID format" });
    }
     if (!title || !content) {
        return res.status(400).json({ message: "Missing required fields (title, content)" });
    }

    try {
        // Find the post first to potentially handle slug changes or image deletion
        const postToUpdate = await BlogPost.findById(id);
        if (!postToUpdate) {
             return res.status(404).json({ message: "Blog post not found for update" });
        }

        // Update fields
        postToUpdate.title = title;
        postToUpdate.content = content;
        postToUpdate.excerpt = excerpt;
        postToUpdate.author = author;
        postToUpdate.status = status;
        if (imageUrl !== undefined) { // Allow updating/removing image URL
             postToUpdate.imageUrl = imageUrl;
        }
        // Slug will be updated by pre-save hook if title changed

        const updatedPost = await postToUpdate.save(); // Use save() to trigger middleware

        res.status(200).json({ message: "Blog post updated successfully", post: updatedPost });
    } catch (err) {
        handleError(res, err, `Error updating blog post ${id}`);
    }
};

// Delete a blog post
export const deleteBlogPost = async (req, res) => {
    const { id } = req.params;
    if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({ message: "Invalid blog post ID format" });
    }
    try {
        const deletedPost = await BlogPost.findByIdAndDelete(id);
        if (!deletedPost) {
            return res.status(404).json({ message: "Blog post not found for deletion" });
        }
        // Optional: Delete associated image file if stored locally
        // if (deletedPost.imageUrl && deletedPost.imageUrl !== '/default-blog-image.jpg') {
        //     const imagePath = path.join(__dirname, '..', deletedPost.imageUrl); // Adjust path as needed
        //     fs.unlink(imagePath, (unlinkErr) => {
        //         if (unlinkErr) console.error(`Error deleting image ${deletedPost.imageUrl}:`, unlinkErr);
        //     });
        // }
        res.status(200).json({ message: "Blog post deleted successfully", post: deletedPost });
    } catch (err) {
        handleError(res, err, `Error deleting blog post ${id}`);
    }
};
